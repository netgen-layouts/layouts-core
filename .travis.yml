os: linux
dist: focal

language: php

php:
  - 7.3
  - 7.4

services:
  - mysql
  - postgresql

addons:
  chrome: stable

cache:
  directories:
    - $HOME/.cache/composer

env:
  - PHPUNIT_CONFIG="phpunit-8.5.xml" SYMFONY_VERSION="~3.4.0" DB="mysql"
  - PHPUNIT_CONFIG="phpunit.xml" SYMFONY_VERSION="~4.4.0" DB="postgresql"
  - PHPUNIT_CONFIG="phpunit.xml" SYMFONY_VERSION="~5.1.0"
  - PHPUNIT_CONFIG="phpunit-8.5-api.xml" SYMFONY_VERSION="~3.4.0" DB="mysql"
  - PHPUNIT_CONFIG="phpunit-api.xml" SYMFONY_VERSION="~4.4.0" DB="postgresql"
  - PHPUNIT_CONFIG="phpunit-api.xml" SYMFONY_VERSION="~5.1.0"

jobs:
  include:
    - php: 7.3
      env: PHPUNIT_CONFIG="phpunit-8.5.xml" SYMFONY_VERSION="~3.4.0" DEPS="low"
    - php: 7.3
      env: PHPUNIT_CONFIG="phpunit-8.5-api.xml" SYMFONY_VERSION="~3.4.0" DEPS="low"
    - php: 7.4
      env: RUN_PHPSTAN="yes" SYMFONY_VERSION="~5.1.0"
    - php: 7.4
      env: RUN_PSALM="yes" SYMFONY_VERSION="~5.1.0"
    - php: 7.4
      env: RUN_BEHAT="yes" SYMFONY_VERSION="~5.1.0"
    - php: 7.4
      env: RUN_MIGRATIONS="yes" DB="mysql" SYMFONY_VERSION="~5.1.0"
    - php: 7.4
      env: RUN_COVERAGE="yes" SYMFONY_VERSION="~5.1.0"
    - env: ~
      php: ~
      cache: ~
      language: node_js
      node_js: node
      before_install:
        - phpenv global 7.4
      # We disable install phase as we need to run yarn install only after "before_script" is completed
      install: true
      script:
        - yarn install
        - yarn run prod
        - yarn run admin:prod
  allow_failures:
    - env: RUN_COVERAGE="yes" SYMFONY_VERSION="~5.1.0"
  fast_finish: true

branches:
  only:
    - master
    - /^\d.\d+$/

before_script:
  - |
    if [ "$DB" = "mysql" ] ; then
      mysql -e "CREATE DATABASE IF NOT EXISTS testdb DEFAULT CHARACTER SET utf8mb4 DEFAULT COLLATE utf8mb4_unicode_520_ci;" -uroot
      export DATABASE=mysql://root@localhost/testdb
    elif [ "$DB" = "postgresql" ] ; then
      psql -c "CREATE DATABASE testdb;" -U postgres
      export DATABASE=pgsql://postgres@localhost/testdb
    fi

  - phpenv config-rm xdebug.ini || true
  - echo "memory_limit=-1" >> ~/.phpenv/versions/$(phpenv version-name)/etc/conf.d/travis.ini

  # Read-only OAuth token to work around GitHub API rate limits
  - composer config -g github-oauth.github.com "4b3b0a83ea27d9544d3608a384c7a14625a98804"

  # Install Flex as a global dependency to enable usage of extra.symfony.require
  # while keeping Flex recipes from applying
  - composer global require --no-scripts symfony/flex

  - if [ "$SYMFONY_VERSION" != "" ] ; then composer config extra.symfony.require $SYMFONY_VERSION ; fi

  - |
    if [ "$DEPS" = "low" ] ; then
      composer update --no-suggest --prefer-dist --prefer-lowest --prefer-stable
    else
      composer update --no-suggest --prefer-dist
    fi

  - |
    if [ "$RUN_BEHAT" = "yes" ] ; then
      ./tests/prepare_behat.sh > /dev/null 2>&1 &
      # Sleep to allow the script to download Chrome WebDriver
      sleep 15
    fi

script:
  - composer validate --strict
  - if [ "$PHPUNIT_CONFIG" != "" ] ; then vendor/bin/phpunit -c $PHPUNIT_CONFIG --colors=always ; fi
  - if [ "$RUN_PHPSTAN" != "" ] ; then composer phpstan ; fi
  - if [ "$RUN_PHPSTAN" != "" ] ; then composer phpstan-tests ; fi
  - if [ "$RUN_PSALM" != "" ] ; then composer psalm ; fi
  - if [ "$RUN_BEHAT" != "" ] ; then composer behat-headless ; fi
  - |
    if [ "$RUN_MIGRATIONS" != "" ] ; then
      php tests/application/bin/console doctrine:migrations:migrate \
      --no-interaction --no-debug --env=prod --configuration=migrations/doctrine.yaml --ansi
    fi
  - |
    if [ "$RUN_COVERAGE" != "" ] ; then
      composer coverage-clover
      composer coverage-clover-api
      bash <(curl -s https://codecov.io/bash) || echo "Codecov did not collect coverage reports"
    fi

notifications:
  email: false
  slack:
    rooms:
      - secure: "gJFCZkD2frS1J0bMEXbFFnRQn/GvVXVIKJ980uOLhLwyNK9XZfA8ySbT8I7+PQ2yGp9z72fBE1sBZaFNo5NilulQMpNUj5Ziofd92KLtGQZMcMxMkBy0AaNuootWVJWhlKLkHamVUHM8QKz4JLW2uUgzo8PShX7RU2AcY8MuWgJKdYG8C3q6BhbSHvCcJxCEy9R/DeMDObZYH50oYx+uRKca5yyS0NFLpXRNsSJ/D//ilr1qxFo8DogNPoCFfGAiBn11Z/SmQZiumhsJCb9mdbEPzxXVWPAnwVGYENA2X0yeFdio6r83MIl00CLbH4gaHWVSjwRtFAG1bHFAk75E1837t66IhQKX1MOVmG+sMgEp5nz1WHMPxSRR3y2v4SqbKLkrn5UkkFbzgKMdU1deJ+bw2nbat7eMt3YDy3aP6huWwEXQYrsgjzNPSp6gxVCSHv0k9MtIFnGYu2ZXvDJDXwCtIey6fgyYGAymIdpneJ3Jnyixvr9YeVrpnQDLheRkO/VT6bj1BWwbvYJJ7Zy0ZBYjKHrhO5hYUgFNl7NC5ioAYlfaJqA9O3/ySewEk469IFAAsoQhtgxHf0FfcpoNph/NYbEMGY8QXzsVm4Zf133FkwxLnyzwU0VkhL21bUoLQTVNjNbHEz0/d05C3cs8/yn7fAsDk/UjXPcVqu09SgU="
    on_success: change
    on_failure: always
    on_pull_requests: false

git:
  depth: 1
